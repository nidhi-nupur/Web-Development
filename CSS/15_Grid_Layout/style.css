@import url("https://fonts.googleapis.com/css2?family=Roboto&display=swap");

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}
body {
  font-family: "Roboto", sans-serif;
  min-height: 100vh;

  display: grid;
  grid-template-columns: repeat(9, 1fr);
  grid-auto-rows: 75px auto 75px;
  grid-template-areas: 
    "hd hd hd hd hd hd hd hd hd"
    "mn mn mn mn mn mn mn sb sb"
    "ft ft ft ft ft ft ft ft ft";
    /* gap: 0.4rem; */
    column-gap: 0.4rem;
}

.el {
  background-color: rebeccapurple;
  color: #fff;
  display: grid;
  place-content: center;
}

.header {
  grid-area: hd;
}

.sidebar {
  grid-area: sb;
  background-color: #f07167;
}

.footer {
  grid-area: ft;
}

.container {
  grid-area: mn;
  min-height: 400px;
  display: grid; /* CSS Grid allows you to create layouts in both rows and columns, making it a two-dimensional layout system. */

  /* The grid-auto-flow property in CSS controls how auto-placed items are inserted into the grid. It determines the direction and order in which these items are placed within the grid container. */
  /* grid-auto-flow: row; */ /* row (default): Items are placed by filling each row in turn, adding new rows as necessary. */
  /* grid-auto-flow: column; */ /* column: Items are placed by filling each column in turn, adding new columns as necessary. */

  /* The grid-template-columns property in CSS is used to define the number and width of columns in a grid layout. */
  /*  You specify the number of columns and their widths using a space-separated list of values.
        Each value represents the size of a respective column. */
  grid-template-columns: 100px 200px 300px; /* Length units (e.g., px, em, %): Define fixed column widths */
  grid-template-columns: 1fr 2fr 1fr; /* Flexible units (fr): Allocate a fraction of the available space. */
  grid-template-columns: 100px 2fr 1fr; /* We can mix the dimension of above two. */

  /* repeat(): Repeat a pattern of columns. */
  grid-template-columns: repeat(
    2,
    1fr
  ); /* repeat(Number of columns, with equal fraction distributions) */
  grid-template-columns: repeat(
    2,
    1fr 2fr
  ); /* repeat(Number of columns, One Column have two Column, one with 1fr and other with 2fr) */



  /* grid-auto-rows: 200px; */ /* Specifies the size of implicitly created rows. */
  grid-auto-rows: minmax(120px, auto); 
  /* - 150px: The minimum height of each row will be 150 pixels.
  - auto: The maximum height of each row will automatically adjust based on the content within the row. */


  /* Gaps */
  row-gap: 0.1rem;
  column-gap: 0.1rem;
  gap: 0.2rem 0.5rem; /* Gaps can define rows and columns separately. */
  gap: 0.2rem; /* Gaps combine both rows and columns. */
}
.box {
  background-color: #000;
  color: #fff;
  font-size: 2rem;
  padding: 0.5rem;
}

.box:first-child {
  background-color: #b5838d;
  grid-column-start: 1;
  grid-column-end: 4; /* Instead of doing so... */
  grid-column: 1 / 4;  /* ... We can do it like this.(Shorthand) */

  grid-row-start: 1;
  grid-row-end: 3; /* Instead of doing so... */
  grid-row: 1 / 3; /* ... We can do it like this.(Shorthand) */


  /* To center the content:- */
  display: grid;
  align-content: center;
  justify-content: center; /* Instead of doing so... */
  place-content: end center;  /* ... We can do it like this.(Shorthand) */
  place-content: center /* One value for both */ ;
}

.box:nth-child(2) {
  background-color: #ffb4a2;
  grid-column: 1 / 5;
  grid-row: 3 / 4;
}
